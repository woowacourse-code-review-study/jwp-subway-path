package subway.acceptance;

import static subway.common.steps.CommonSteps.비정상_요청;
import static subway.common.steps.CommonSteps.요청_결과의_상태를_검증한다;
import static subway.common.steps.CommonSteps.정상_요청;
import static subway.common.steps.LineSteps.노선_생성_요청;
import static subway.common.steps.LineSteps.노선_전체_조회_결과를_확인한다;
import static subway.common.steps.LineSteps.노선_전체_조회_요청;
import static subway.common.steps.LineSteps.노선_정보;
import static subway.common.steps.SectionSteps.구간_삭제_요청;
import static subway.common.steps.SectionSteps.구간_생성_요청;
import static subway.common.steps.SectionSteps.노선에_구간이_존재하지_않을_때_초기_구간_생성_요청;
import static subway.common.steps.SectionSteps.오른쪽;
import static subway.common.steps.SectionSteps.왼쪽;

import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import subway.common.AcceptanceTest;

@SuppressWarnings("NonAsciiCharacters")
public class StationAcceptanceTest extends AcceptanceTest {

    @Nested
    public class 빈_노선인_경우_초기_구간_생성을_통해_역을_추가한다 {

        @Test
        void 이_때_정상_요청의_경우_역_두개가_정상적으로_추가된다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            final var 요청_결과 = 노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "잠실새내", 5);

            // expect
            요청_결과의_상태를_검증한다(요청_결과, 정상_요청);
            final var 전체_노선_정보 = 노선_전체_조회_요청();
            노선_전체_조회_결과를_확인한다(
                    전체_노선_정보,
                    노선_정보("2호선", "초록", 0, "잠실", "잠실새내")
            );
        }

        @Test
        void 이_때_노선에_역이_이미_존재하는_경우_예외가_발생한다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "잠실새내", 5);

            // when
            final var 요청_결과 = 노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "잠실새내", 5);

            // then
            요청_결과의_상태를_검증한다(요청_결과, 비정상_요청);
        }
    }

    @Nested
    public class 노선에_구간을_추가할_때 {

        @Test
        void 기준역이_존재한다면_구간_생성_요청을_통해_역을_추가할_수_있다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            final var 요청_결과 = 노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "종합운동장", 5);

            // when
            구간_생성_요청("2호선", "종합운동장", "잠실새내", 왼쪽, 2);

            // then
            요청_결과의_상태를_검증한다(요청_결과, 정상_요청);
            final var 전체_노선_정보 = 노선_전체_조회_요청();
            노선_전체_조회_결과를_확인한다(
                    전체_노선_정보,
                    노선_정보("2호선", "초록", 0, "잠실", "잠실새내", "종합운동장")
            );
        }

        @Test
        void 전체_노선에_생성할_구간이_이미_존재하는_경우_예외가_발생한다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "잠실새내", 5);
            노선_생성_요청("1호선", "파랑", 0);

            // when
            final var 요청_결과 = 노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "잠실새내", 5);

            // then
            요청_결과의_상태를_검증한다(요청_결과, 비정상_요청);
        }

        @Test
        void 등록할_역이_같은_노선에는_존재하는_경우_예외가_발생한다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "잠실새내", 5);
            구간_생성_요청("2호선", "잠실새내", "종합운동장", 오른쪽, 2);

            // when
            final var 요청_결과 = 구간_생성_요청("2호선", "종합운동장", "잠실", 오른쪽, 2);

            // then
            요청_결과의_상태를_검증한다(요청_결과, 비정상_요청);
        }

        @Test
        void 기준역이_존재하지_않는_경우_예외가_발생한다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "잠실새내", 5);

            // when
            final var 요청_결과 = 구간_생성_요청("2호선", "종합운동장", "잠실", 오른쪽, 2);

            // then
            요청_결과의_상태를_검증한다(요청_결과, 비정상_요청);
        }

        @Test
        void 구간_사이에_추가하는_경우_구간_사이의_길이보다_추가할_구간의_거리가_같거나_긴경우_예외가_발생한다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "종합운동장", 5);

            // when
            final var 요청_결과 = 구간_생성_요청("2호선", "종합운동장", "잠실새내", 왼쪽, 5);

            // then
            요청_결과의_상태를_검증한다(요청_결과, 비정상_요청);
        }
    }

    @Nested
    public class 노선에_구간을_삭제할_때 {

        @Test
        void 해당_노선에_역이_두개_밖에_존재하지_않는_경우_모든_역이_삭제된다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            final var 요청_결과 = 노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "종합운동장", 5);

            // when
            구간_삭제_요청("2호선", "종합운동장");

            // then
            요청_결과의_상태를_검증한다(요청_결과, 정상_요청);
            final var 전체_노선_정보 = 노선_전체_조회_요청();
            노선_전체_조회_결과를_확인한다(
                    전체_노선_정보,
                    노선_정보("2호선", "초록", 0)
            );
        }

        @Test
        void 정상_요청인_경우_역이_삭제된다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            final var 요청_결과 = 노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "종합운동장", 5);
            구간_생성_요청("2호선", "종합운동장", "잠실새내", 왼쪽, 2);

            // when
            구간_삭제_요청("2호선", "종합운동장");

            // then
            요청_결과의_상태를_검증한다(요청_결과, 정상_요청);
            final var 전체_노선_정보 = 노선_전체_조회_요청();
            노선_전체_조회_결과를_확인한다(
                    전체_노선_정보,
                    노선_정보("2호선", "초록", 0, "잠실", "잠실새내")
            );
        }

        @Test
        void 존재하지_않는_역은_삭제_요청하는_경우_예외가_발생한다() {
            // given
            노선_생성_요청("2호선", "초록", 0);
            노선에_구간이_존재하지_않을_때_초기_구간_생성_요청("2호선", "잠실", "종합운동장", 5);

            // when
            final var 요청_결과 = 구간_삭제_요청("2호선", "사당");

            // then
            요청_결과의_상태를_검증한다(요청_결과, 비정상_요청);
        }
    }
}
